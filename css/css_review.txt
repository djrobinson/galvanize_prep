Okay, now that I have a bare bones blog up, I'm going to take a step back and dive into the vary basics of web design.  I'm going to take a look at html, css, and jquery to start making my blog look a little bit better.  AFter this is done, I'm going to add authentication to my blog so it is actually a functioning and presentable blog.

So to start off, I'm going to do theodinproject's recreate the youtube webpage project. Also, I hate CSS, so I want to dedicate some time to getting these concepts out of the way. CSS seems to work in a more isolated way than other languages I'll be learning about, so I feel like if I hit it hard at the beginning I won't deal with the pain of not being able to focus during galvanize.  Here's the sections I'll be covering;

The CSS Box Model
Floats and Positioning
Best Practices.
Backgrounds & Gradients
Intro to Design & UX
Fonts and Typography
CSS Grids
Responsive design
Animations
CSS Preprocessors

....................................................................

Box Model

Display

Options
block - occupies all available width on line and begin on a new line. Doesn't depend on content size
inline - Occupy only the width of their content and occupy the same line one after the other
inline-block - 

Box Model

Every element on a page is a rectangular box

Every part of the box model is defined by a css property.  The 5 css properties that make up the box model are:
width - defines the width of the rectangle
height - defines the height of te rectangle
border - border is between the margin and the padding
margin - sets the amount of space that surrounds and element
padding - sets the amount of space between the content and the border


div {
  border: 6px solid #949599;
  height: 100px;
  margin: 20px;
  padding: 20px;
  width: 400px;
}

Floats and Positioning

Floats

Normal Flow
HTML DOM Elements are tied to a set of rules on the orderr in which they appear.  This is called the normal flow. Each block element is stacked on top of each other vertically 

"In the normal flow, each block element (div, p, h1, etc.) stacks on top of each other vertically, from the top of the viewport down. Floated elements are first laid out according to the normal flow, then taken out of the normal flow and sent as far to the right or left (depending on which value is applied) of the parent element. In other words, they go from stacking on top of each other to sitting next to each other, given that there is enough room in the parent element for each floated element to sit. This behavior is crucial to remember as you build your websites."

http://alistapart.com/article/css-floats-101

"The clear property has five values available: left, right, both, inherit, and none. Assigning a value of left says the top edge of this element must sit below any element that has the float: left property applied to it. The same concept applies for the right valueâ€”the element must sit beneath any element that has the float: right property applied to it. Using the both value tells our element that its top edge must sit below any element floated either left or right. The inherit value takes on the clear property from its parent element, while the default value none behaves as you would expect."


Positioning

http://alistapart.com/article/css-positioning-101

Static - doesn't have any top, right, bottom, or left functions available to it.  Only good for stacking elements on top of each other

Relative - this can use offset. Works relative to the last object that was created

Absolute - define exactly wehre the element should be based off the offset values

Fixed - Defined based off viewport

Best intro site
http://www.learnlayout.com/

Good responsive design for mobile guidelines: http://bradfrost.com/blog/web/responsive-nav-patterns/

Okay, so I've read through all of the css articles and I know what I want to work off of. Now I am going to make up some projects to apply what I've read.  I'll do the following:

-Create 3 CSS/HTML templates based off the learnlayout tutorial
-Create the layout for a single blog post for my blog
-Create a layout for a trading interface (this will be the stretch goal)

Then I would like to wrap up with a few html5 items I've never touched on like embedded video.

Okay, so to start out I'm going to setup my css practice folder and generate a few directories to hold my projects:

mkdir css
touch index1.html
touch style1.css
... 2 ... 3

Then I'll set up a few divs to play around with on my page:

<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="style1.css">
	</head>
	<body>
		<div class="banner">
			<h2>
		</div>
		<div class="container"
			<nav>
			</nav>
			<section>
			</section>
			<section>
			</section>
		</div>
	</body>
</html> 

From here, I'll work with CSS files similar to the following to learn how to adjust the display and position elements to get the desired result:

.container {
  position: relative;
  border: solid;
  border-style: solid;
  border-color: aqua;
  
}

.picContainer {
	position: relative;
	border-style: solid;
	border-width: 3px;
	height: 500px;
}

.banner {
	position: fixed;
	border-style: solid;
  	border-color: blue;
  	height: 100px;
  	width: 99%;
  	text-align: center;

}
nav {
  position: absolute;
  left: 0px;
  width: 200px;
  border-style: solid;
  border-color: green;
}
section {
  /* position is static by default */
  margin-left: 200px;
  padding: 5px;
  border-style: solid;
  border-color: orange;
}
footer {
  position: fixed;
  bottom: 0;
  left: 0;
  height: 70px;
  background-color: white;
  width: 100%;
  border-style: solid;
  border-color: yellow;
  text-align: center;
}


body {
  margin-bottom: 120px;
}

* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

Now I'm going to take the blog layout and apply it to my current blog layout.  Since I don't have any authentication set up for my blog, anyone can come in and add, delete, or edit a blog.  I'm going to style this as a posts page, and ignore tabs and seperate pages until later. I'll make a table of contents to nowhere and a few extra boxes where I'll add angular directives later.

Before I get started I'm going to push my blog app to github so I can remember the things that I've change.

git init

git add . -A

git add remote <github url>

git commit -m "initial commit" 

Bootstrap nav notes

I have often struggled with getting my menu items in the correct location on a bootstrap navbar given that everything is supposed to float to the left.  I found some code that I want to analyze that I will use in the future to get my navbars to cooperate:

The CSS:

.navbar-brand
{
    position: absolute;  
    width: 100%;
    left: 0;
    text-align: center;
    margin: auto;
}


The HTML:


		<nav class="navbar navbar-default" role="navigation">
		  <div class="navbar-header">
			 <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
			 </button>    
		  </div>
		  <a class="navbar-brand" href="#">Brand</a>
		  <div class="navbar-collapse collapse">
			 <ul class="nav navbar-nav navbar-left">
				  <li><a href="#">Left</a></li>
				  <li><a href="#about">Left</a></li>
			 </ul>
			 <ul class="nav navbar-nav navbar-right">
				<li><a href="#about">Right</a></li>
				<li><a href="#contact">Right</a></li>
			 </ul>
		  </div>
		</nav>

There's 3 options available to us here:

Left:
<ul class="nav navbar-nav navbar-left">

Bootstrap provides navbar-left to automatically float left
			 
Right:

<ul class="nav navbar-nav navbar-right">

Bootstrap provides navbar-right to automatically float right

Center:

Bootstrap doesn't provide this, but it can be achieved through creating a class navbar-brand and aligning the items :

{
    position: absolute;  
    width: 100%;
    left: 0;
    text-align: center;
    margin: auto;
}

The text-align makes the 'a' element centered on the page so that I can place my own brand front and center.  I kind of hate the bootstrap navbars, so I would like to build one with angular or jquery to replace the left and right portions of what I currently have.

Okay, so today I'm changing plans and researching a WYSIWYG javascript plugin that I can use to format my blog posts. I'll spend a bit of this morning getting one integrated. After that, I'm going to blow past CSS and move into Angular. I have a feeling that Angular is going to be what most employers will be looking for out of the gate, so I would like to be able to speak to it prior to the program's start date.

Okay so I've integrated with TinyMCE (http://www.tinymce.com/) and it was pretty easy to get on the page, but it's not sending the form to angular.

So I've played around with tinymce, and I can't seem to get it to play nice with angular. I'm going to skip over to some html practice to see if I can get it working on it's own without angular.  If I can't figure out what's going on I'm going to need to figure out how to construct a directive specifically for tinymce (I think this will be worth it, because I fully expect to use it several times in teh future.




